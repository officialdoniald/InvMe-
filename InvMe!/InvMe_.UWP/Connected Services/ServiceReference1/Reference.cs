//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26720.2
// 
namespace InvMe_.UWP.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseService")]
    public interface IDatabaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertUser", ReplyAction="http://tempuri.org/IDatabaseService/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(InvMe.DAL.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertEvents", ReplyAction="http://tempuri.org/IDatabaseService/InsertEventsResponse")]
        System.Threading.Tasks.Task<int> InsertEventsAsync(InvMe.DAL.Model.Events events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertFriends", ReplyAction="http://tempuri.org/IDatabaseService/InsertFriendsResponse")]
        System.Threading.Tasks.Task<string> InsertFriendsAsync(InvMe.DAL.Model.Friends friends);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertHashtagsM", ReplyAction="http://tempuri.org/IDatabaseService/InsertHashtagsMResponse")]
        System.Threading.Tasks.Task<string> InsertHashtagsMAsync(InvMe.DAL.Model.HashtagsM hashtags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertAttended", ReplyAction="http://tempuri.org/IDatabaseService/InsertAttendedResponse")]
        System.Threading.Tasks.Task<bool> InsertAttendedAsync(InvMe.DAL.Model.Attended attended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteUser", ReplyAction="http://tempuri.org/IDatabaseService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(InvMe.DAL.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteEvent", ReplyAction="http://tempuri.org/IDatabaseService/DeleteEventResponse")]
        System.Threading.Tasks.Task<bool> DeleteEventAsync(InvMe.DAL.Model.Events events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteHashtag", ReplyAction="http://tempuri.org/IDatabaseService/DeleteHashtagResponse")]
        System.Threading.Tasks.Task<bool> DeleteHashtagAsync(InvMe.DAL.Model.HashtagsM hastag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteFriend", ReplyAction="http://tempuri.org/IDatabaseService/DeleteFriendResponse")]
        System.Threading.Tasks.Task<bool> DeleteFriendAsync(InvMe.DAL.Model.Friends friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteAttended", ReplyAction="http://tempuri.org/IDatabaseService/DeleteAttendedResponse")]
        System.Threading.Tasks.Task<bool> DeleteAttendedAsync(InvMe.DAL.Model.Attended attend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdateUser", ReplyAction="http://tempuri.org/IDatabaseService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(int ID, InvMe.DAL.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdateEvent", ReplyAction="http://tempuri.org/IDatabaseService/UpdateEventResponse")]
        System.Threading.Tasks.Task<bool> UpdateEventAsync(int ID, InvMe.DAL.Model.Events events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdateHashtag", ReplyAction="http://tempuri.org/IDatabaseService/UpdateHashtagResponse")]
        System.Threading.Tasks.Task<bool> UpdateHashtagAsync(int ID, InvMe.DAL.Model.HashtagsM hastag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdateFriend", ReplyAction="http://tempuri.org/IDatabaseService/UpdateFriendResponse")]
        System.Threading.Tasks.Task<bool> UpdateFriendAsync(int ID, InvMe.DAL.Model.Friends friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetUser", ReplyAction="http://tempuri.org/IDatabaseService/GetUserResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.User>> GetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetEvent", ReplyAction="http://tempuri.org/IDatabaseService/GetEventResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Events>> GetEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetHashtag", ReplyAction="http://tempuri.org/IDatabaseService/GetHashtagResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.HashtagsM>> GetHashtagAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetFriend", ReplyAction="http://tempuri.org/IDatabaseService/GetFriendResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Friends>> GetFriendAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetAttended", ReplyAction="http://tempuri.org/IDatabaseService/GetAttendedResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetUserByID", ReplyAction="http://tempuri.org/IDatabaseService/GetUserByIDResponse")]
        System.Threading.Tasks.Task<InvMe.DAL.Model.User> GetUserByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetUserByEMAIL", ReplyAction="http://tempuri.org/IDatabaseService/GetUserByEMAILResponse")]
        System.Threading.Tasks.Task<InvMe.DAL.Model.User> GetUserByEMAILAsync(string EMAIL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetEventByID", ReplyAction="http://tempuri.org/IDatabaseService/GetEventByIDResponse")]
        System.Threading.Tasks.Task<InvMe.DAL.Model.Events> GetEventByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetHashtagByID", ReplyAction="http://tempuri.org/IDatabaseService/GetHashtagByIDResponse")]
        System.Threading.Tasks.Task<InvMe.DAL.Model.HashtagsM> GetHashtagByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetFriendByID", ReplyAction="http://tempuri.org/IDatabaseService/GetFriendByIDResponse")]
        System.Threading.Tasks.Task<InvMe.DAL.Model.Friends> GetFriendByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetAttendedByID", ReplyAction="http://tempuri.org/IDatabaseService/GetAttendedByIDResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetAttendedByEventID", ReplyAction="http://tempuri.org/IDatabaseService/GetAttendedByEventIDResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedByEventIDAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseServiceChannel : InvMe_.UWP.ServiceReference1.IDatabaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<InvMe_.UWP.ServiceReference1.IDatabaseService>, InvMe_.UWP.ServiceReference1.IDatabaseService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), DatabaseServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(InvMe.DAL.Model.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertEventsAsync(InvMe.DAL.Model.Events events) {
            return base.Channel.InsertEventsAsync(events);
        }
        
        public System.Threading.Tasks.Task<string> InsertFriendsAsync(InvMe.DAL.Model.Friends friends) {
            return base.Channel.InsertFriendsAsync(friends);
        }
        
        public System.Threading.Tasks.Task<string> InsertHashtagsMAsync(InvMe.DAL.Model.HashtagsM hashtags) {
            return base.Channel.InsertHashtagsMAsync(hashtags);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAttendedAsync(InvMe.DAL.Model.Attended attended) {
            return base.Channel.InsertAttendedAsync(attended);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(InvMe.DAL.Model.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEventAsync(InvMe.DAL.Model.Events events) {
            return base.Channel.DeleteEventAsync(events);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteHashtagAsync(InvMe.DAL.Model.HashtagsM hastag) {
            return base.Channel.DeleteHashtagAsync(hastag);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFriendAsync(InvMe.DAL.Model.Friends friend) {
            return base.Channel.DeleteFriendAsync(friend);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAttendedAsync(InvMe.DAL.Model.Attended attend) {
            return base.Channel.DeleteAttendedAsync(attend);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(int ID, InvMe.DAL.Model.User user) {
            return base.Channel.UpdateUserAsync(ID, user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEventAsync(int ID, InvMe.DAL.Model.Events events) {
            return base.Channel.UpdateEventAsync(ID, events);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateHashtagAsync(int ID, InvMe.DAL.Model.HashtagsM hastag) {
            return base.Channel.UpdateHashtagAsync(ID, hastag);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFriendAsync(int ID, InvMe.DAL.Model.Friends friend) {
            return base.Channel.UpdateFriendAsync(ID, friend);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.User>> GetUserAsync() {
            return base.Channel.GetUserAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Events>> GetEventAsync() {
            return base.Channel.GetEventAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.HashtagsM>> GetHashtagAsync() {
            return base.Channel.GetHashtagAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Friends>> GetFriendAsync() {
            return base.Channel.GetFriendAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedAsync() {
            return base.Channel.GetAttendedAsync();
        }
        
        public System.Threading.Tasks.Task<InvMe.DAL.Model.User> GetUserByIDAsync(int ID) {
            return base.Channel.GetUserByIDAsync(ID);
        }
        
        public System.Threading.Tasks.Task<InvMe.DAL.Model.User> GetUserByEMAILAsync(string EMAIL) {
            return base.Channel.GetUserByEMAILAsync(EMAIL);
        }
        
        public System.Threading.Tasks.Task<InvMe.DAL.Model.Events> GetEventByIDAsync(int ID) {
            return base.Channel.GetEventByIDAsync(ID);
        }
        
        public System.Threading.Tasks.Task<InvMe.DAL.Model.HashtagsM> GetHashtagByIDAsync(int ID) {
            return base.Channel.GetHashtagByIDAsync(ID);
        }
        
        public System.Threading.Tasks.Task<InvMe.DAL.Model.Friends> GetFriendByIDAsync(int ID) {
            return base.Channel.GetFriendByIDAsync(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedByIDAsync(int ID) {
            return base.Channel.GetAttendedByIDAsync(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InvMe.DAL.Model.Attended>> GetAttendedByEventIDAsync(int ID) {
            return base.Channel.GetAttendedByEventIDAsync(ID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IDatabaseService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService)) {
                return new System.ServiceModel.EndpointAddress("http://invmewcf.azurewebsites.net/DatabaseService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IDatabaseService)) {
                return new System.ServiceModel.EndpointAddress("https://invmewcf.azurewebsites.net/DatabaseService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IDatabaseService,
            
            BasicHttpsBinding_IDatabaseService,
        }
    }
}
